!function(t){"use strict";var e=t.jCarousel={};e.version="0.3.4";var i=/^([+\-]=)?(.+)$/;e.parseTarget=function(t){var e=!1,n="object"!=typeof t?i.exec(t):null;return n?(t=parseInt(n[2],10)||0,n[1]&&(e=!0,"-="===n[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:e}},e.detectCarousel=function(t){for(var e;t.length>0;){if(e=t.filter("[data-jcarousel]"),e.length>0)return e;if(e=t.find("[data-jcarousel]"),e.length>0)return e;t=t.parent()}return null},e.base=function(i){return{version:e.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+i.toLowerCase(),!0).data(i,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(i).removeAttr("data-"+i.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(e,i){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof e){if("undefined"==typeof i)return"undefined"==typeof this._options[e]?null:this._options[e];this._options[e]=i}else this._options=t.extend({},this._options,e);return this},carousel:function(){return this._carousel||(this._carousel=e.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+i+'"')),this._carousel},_trigger:function(e,n,o){var r,s=!1;return o=[this].concat(o||[]),(n||this._element).each(function(){r=t.Event((i+":"+e).toLowerCase()),t(this).trigger(r,o),r.isDefaultPrevented()&&(s=!0)}),!s}}},e.plugin=function(i,n){var o=t[i]=function(e,i){this._element=t(e),this.options(i),this._init(),this.create()};return o.fn=o.prototype=t.extend({},e.base(i),n),t.fn[i]=function(e){var n=Array.prototype.slice.call(arguments,1),r=this;return"string"==typeof e?this.each(function(){var o=t(this).data(i);if(!o)return t.error("Cannot call methods on "+i+' prior to initialization; attempted to call method "'+e+'"');if(!t.isFunction(o[e])||"_"===e.charAt(0))return t.error('No such method "'+e+'" for '+i+" instance");var s=o[e].apply(o,n);return s!==o&&"undefined"!=typeof s?(r=s,!1):void 0}):this.each(function(){var n=t(this).data(i);n instanceof o?n.reload(e):new o(this,e)}),r},o}}(jQuery),function(t,e){"use strict";var i=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(e).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(e).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(e){if("rtl"===(""+e.attr("dir")).toLowerCase())return!0;var i=!1;return e.parents("[dir]").each(function(){if(/rtl/i.test(t(this).attr("dir")))return i=!0,!1}),i}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var e=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var i={left:0,top:0};return e.length>0&&(this._prepare(e),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,i[this.lt]=this._position(e)+"px"),this.move(i),this},list:function(){if(null===this._list){var e=this.options("list");this._list=t.isFunction(e)?e.call(this):this._element.find(e)}return this._list},items:function(){if(null===this._items){var e=this.options("items");this._items=(t.isFunction(e)?e.call(this):this.list().find(e)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var e,n=this,o=this.list().position()[this.lt],r=t(),s=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(o+=this.list().width()-this.clipping()),this.items().each(function(){if(r=t(this),s)return!1;var h=n.dimension(r);if(o+=h,o>=0){if(e=h-i(r.css("margin-"+a)),!(Math.abs(o)-h+e/2<=0))return!1;s=!0}}),r},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),e=this.items().length-1,i=this.options("center")?this._target:this._last;return!!(e>=0&&!this.underflow&&(t&&"first"!==t||this.index(i)<e||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(e,i,n){if(this.animating)return this;if(!1===this._trigger("scroll",null,[e,i]))return this;t.isFunction(i)&&(n=i,i=!0);var o=t.jCarousel.parseTarget(e);if(o.relative){var r,s,a,h,l,u,c,p,f=this.items().length-1,d=Math.abs(o.target),m=this.options("wrap");if(o.target>0){var y=this.index(this._last);if(y>=f&&this.tail)this.inTail?"both"===m||"last"===m?this._scroll(0,i,n):t.isFunction(n)&&n.call(this,!1):this._scrollTail(i,n);else if(r=this.index(this._target),this.underflow&&r===f&&("circular"===m||"both"===m||"last"===m)||!this.underflow&&y===f&&("both"===m||"last"===m))this._scroll(0,i,n);else if(a=r+d,this.circular&&a>f){for(p=f,l=this.items().get(-1);p++<a;)l=this.items().eq(0),u=this._visible.index(l)>=0,u&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(l),u||(c={},c[this.lt]=this.dimension(l),this.moveBy(c)),this._items=null;this._scroll(l,i,n)}else this._scroll(Math.min(a,f),i,n)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-d+1,0),i,n);else if(s=this.index(this._first),r=this.index(this._target),h=this.underflow?r:s,a=h-d,h<=0&&(this.underflow&&"circular"===m||"both"===m||"first"===m))this._scroll(f,i,n);else if(this.circular&&a<0){for(p=a,l=this.items().get(0);p++<0;){l=this.items().eq(-1),u=this._visible.index(l)>=0,u&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(l),this._items=null;var g=this.dimension(l);c={},c[this.lt]=-g,this.moveBy(c)}this._scroll(l,i,n)}else this._scroll(Math.max(a,0),i,n)}else this._scroll(o.target,i,n);return this._trigger("scrollend"),this},moveBy:function(t,e){var n=this.list().position(),o=1,r=0;return this.rtl&&!this.vertical&&(o=-1,this.relative&&(r=this.list().width()-this.clipping())),t.left&&(t.left=n.left+r+i(t.left)*o+"px"),t.top&&(t.top=n.top+r+i(t.top)*o+"px"),this.move(t,e)},move:function(e,i){i=i||{};var n=this.options("transitions"),o=!!n,r=!!n.transforms,s=!!n.transforms3d,a=i.duration||0,h=this.list();if(!o&&a>0)return void h.animate(e,i);var l=i.complete||t.noop,u={};if(o){var c={transitionDuration:h.css("transitionDuration"),transitionTimingFunction:h.css("transitionTimingFunction"),transitionProperty:h.css("transitionProperty")},p=l;l=function(){t(this).css(c),p.call(this)},u={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:n.easing||i.easing,transitionProperty:a>0?function(){return r||s?"all":e.left?"left":"top"}():"none",transform:"none"}}s?u.transform="translate3d("+(e.left||0)+","+(e.top||0)+",0)":r?u.transform="translate("+(e.left||0)+","+(e.top||0)+")":t.extend(u,e),o&&a>0&&h.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",l),h.css(u),a<=0&&h.each(function(){l.call(this)})},_scroll:function(e,i,n){if(this.animating)return t.isFunction(n)&&n.call(this,!1),this;if("object"!=typeof e?e=this.items().eq(e):"undefined"==typeof e.jquery&&(e=t(e)),0===e.length)return t.isFunction(n)&&n.call(this,!1),this;this.inTail=!1,this._prepare(e);var o=this._position(e),r=this.list().position()[this.lt];if(o===r)return t.isFunction(n)&&n.call(this,!1),this;var s={};return s[this.lt]=o+"px",this._animate(s,i,n),this},_scrollTail:function(e,i){if(this.animating||!this.tail)return t.isFunction(i)&&i.call(this,!1),this;var n=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(n+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?n+=this.tail:n-=this.tail,this.inTail=!0;var o={};return o[this.lt]=n+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(o,e,i),this},_animate:function(e,i,n){if(n=n||t.noop,!1===this._trigger("animate"))return n.call(this,!1),this;this.animating=!0;var o=this.options("animation"),r=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),n.call(this,!0)},this),s="object"==typeof o?t.extend({},o):{duration:o},a=s.complete||t.noop;return i===!1?s.duration=0:"undefined"!=typeof t.fx.speeds[s.duration]&&(s.duration=t.fx.speeds[s.duration]),s.complete=function(){r(),a.call(this)},this.move(e,s),this},_prepare:function(e){var n,o,r,s,a=this.index(e),h=a,l=this.dimension(e),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",p=this.options("center"),f={target:e,first:e,last:e,visible:e,fullyvisible:l<=u?e:t()};if(p&&(l/=2,u/=2),l<u)for(;;){if(n=this.items().eq(++h),0===n.length){if(!this.circular)break;if(n=this.items().eq(0),e.get(0)===n.get(0))break;if(o=this._visible.index(n)>=0,o&&n.after(n.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(n),!o){var d={};d[this.lt]=this.dimension(n),this.moveBy(d)}this._items=null}if(s=this.dimension(n),0===s)break;if(l+=s,f.last=n,f.visible=f.visible.add(n),r=i(n.css("margin-"+c)),l-r<=u&&(f.fullyvisible=f.fullyvisible.add(n)),l>=u)break}if(!this.circular&&!p&&l<u)for(h=a;;){if(--h<0)break;if(n=this.items().eq(h),0===n.length)break;if(s=this.dimension(n),0===s)break;if(l+=s,f.first=n,f.visible=f.visible.add(n),r=i(n.css("margin-"+c)),l-r<=u&&(f.fullyvisible=f.fullyvisible.add(n)),l>=u)break}return this._update(f),this.tail=0,p||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(f.last)!==this.items().length-1||(l-=i(f.last.css("margin-"+c)),l>u&&(this.tail=l-u)),this},_position:function(t){var e=this._first,i=e.position()[this.lt],n=this.options("center"),o=n?this.clipping()/2-this.dimension(e)/2:0;return this.rtl&&!this.vertical?(i-=this.relative?this.list().width()-this.dimension(e):this.clipping()-this.dimension(e),i+=o):i-=o,!n&&(this.index(t)>this.index(e)||this.inTail)&&this.tail?(i=this.rtl&&!this.vertical?i-this.tail:i+this.tail,this.inTail=!0):this.inTail=!1,-i},_update:function(e){var i,n=this,o={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},r=this.index(e.first||o.first)<this.index(o.first),s=function(i){var s=[],a=[];e[i].each(function(){o[i].index(this)<0&&s.push(this)}),o[i].each(function(){e[i].index(this)<0&&a.push(this)}),r?s=s.reverse():a=a.reverse(),n._trigger(i+"in",t(s)),n._trigger(i+"out",t(a)),n["_"+i]=e[i]};for(i in e)s(i);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(e,i,n){var o,r=t.jCarousel.parseTarget(e),s=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(o=r.relative?r.target<0?Math.max(0,s+r.target):a+r.target:"object"!=typeof r.target?r.target:this.index(r.target),o<s)return this.scroll(o,i,n);if(o>=s&&o<=a)return t.isFunction(n)&&n.call(this,!1),this;for(var h,l=this.items(),u=this.clipping(),c=this.vertical?"bottom":this.rtl?"left":"right",p=0;;){if(h=l.eq(o),0===h.length)break;if(p+=this.dimension(h),p>=u){var f=parseFloat(h.css("margin-"+c))||0;p-f!==u&&o++;break}if(o<=0)break;o--}return this.scroll(o,i,n)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(e){e.preventDefault();var i=this.options("method");t.isFunction(i)?i.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var e,i=t.jCarousel.parseTarget(this.options("target")),n=this.carousel();if(i.relative)e=n.jcarousel(i.target>0?"hasNext":"hasPrev");else{var o="object"!=typeof i.target?n.jcarousel("items").eq(i.target):i.target;e=n.jcarousel("target").index(o)>=0}return this._active!==e&&(this._trigger(e?"active":"inactive"),this._active=e),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var e=this.options("perPage");if(this._pages={},this._items={},t.isFunction(e)&&(e=e.call(this)),null==e)this._pages=this._calculatePages();else for(var i,n=parseInt(e,10)||0,o=this._getCarouselItems(),r=1,s=0;;){if(i=o.eq(s++),0===i.length)break;this._pages[r]?this._pages[r]=this._pages[r].add(i):this._pages[r]=i,s%n===0&&r++}this._clear();var a=this,h=this.carousel().data("jcarousel"),l=this._element,u=this.options("item"),c=this._getCarouselItems().length;t.each(this._pages,function(e,i){var n=a._items[e]=t(u.call(a,e,i));n.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=i.eq(0);if(h.circular){var n=h.index(h.target()),o=h.index(t);parseFloat(e)>parseFloat(a._currentPage)?o<n&&(t="+="+(c-n+o)):o>n&&(t="-="+(n+(c-o)))}h[this.options("method")](t)},a)),l.append(n)}),this._update()},_update:function(){var e,i=this.carousel().jcarousel("target");t.each(this._pages,function(t,n){if(n.each(function(){if(i.is(this))return e=t,!1}),e)return!1}),this._currentPage!==e&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[e])),this._currentPage=e},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,e,i=this.carousel().data("jcarousel"),n=this._getCarouselItems(),o=i.clipping(),r=0,s=0,a=1,h={};;){if(t=n.eq(s++),0===t.length)break;e=i.dimension(t),r+e>o&&(a++,r=0),r+=e,h[a]?h[a]=h[a].add(t):h[a]=t}return h},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,e){"use strict";var i,n,o={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(o,function(t,o){if("undefined"!=typeof e[t])return i=t,n=o,!1}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){e[i]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(e).on(n,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(e).off(n,this.onVisibilityChange)},_start:function(){if(this._stop(),this._started)return this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(){var t={};this.tmplJR=function e(i,n){var o=/\W/.test(i)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+i.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):t[i]=t[i]||e(document.getElementById(i).innerHTML);return n?o(n):o}}(),function(t){function e(){}function i(t){function i(e){e.prototype.option||(e.prototype.option=function(e){t.isPlainObject(e)&&(this.options=t.extend(!0,this.options,e))})}function o(e,i){t.fn[e]=function(o){if("string"==typeof o){for(var s=n.call(arguments,1),a=0,h=this.length;a<h;a++){var l=this[a],u=t.data(l,e);if(u)if(t.isFunction(u[o])&&"_"!==o.charAt(0)){var c=u[o].apply(u,s);if(void 0!==c)return c}else r("no such method '"+o+"' for "+e+" instance");else r("cannot call methods on "+e+" prior to initialization; attempted to call '"+o+"'")}return this}return this.each(function(){var n=t.data(this,e);n?(n.option(o),n._init()):(n=new i(this,o),t.data(this,e,n))})}}if(t){var r="undefined"==typeof console?e:function(t){console.error(t)};return t.bridget=function(t,e){i(e),o(t,e)},t.bridget}}var n=Array.prototype.slice;"function"==typeof define&&define.amd?define("jquery-bridget/jquery.bridget",["jquery"],i):i("object"==typeof exports?require("jquery"):t.jQuery)}(window),function(t){function e(e){var i=t.event;return i.target=i.target||i.srcElement||e,i}var i=document.documentElement,n=function(){};i.addEventListener?n=function(t,e,i){t.addEventListener(e,i,!1)}:i.attachEvent&&(n=function(t,i,n){t[i+n]=n.handleEvent?function(){var i=e(t);n.handleEvent.call(n,i)}:function(){var i=e(t);n.call(t,i)},t.attachEvent("on"+i,t[i+n])});var o=function(){};i.removeEventListener?o=function(t,e,i){t.removeEventListener(e,i,!1)}:i.detachEvent&&(o=function(t,e,i){t.detachEvent("on"+e,t[e+i]);try{delete t[e+i]}catch(n){t[e+i]=void 0}});var r={bind:n,unbind:o};"function"==typeof define&&define.amd?define("eventie/eventie",r):"object"==typeof exports?module.exports=r:t.eventie=r}(window),function(){function t(){}function e(t,e){for(var i=t.length;i--;)if(t[i].listener===e)return i;return-1}function i(t){return function(){return this[t].apply(this,arguments)}}var n=t.prototype,o=this,r=o.EventEmitter;n.getListeners=function(t){var e,i,n=this._getEvents();if(t instanceof RegExp){e={};for(i in n)n.hasOwnProperty(i)&&t.test(i)&&(e[i]=n[i])}else e=n[t]||(n[t]=[]);return e},n.flattenListeners=function(t){var e,i=[];for(e=0;e<t.length;e+=1)i.push(t[e].listener);return i},n.getListenersAsObject=function(t){var e,i=this.getListeners(t);return i instanceof Array&&(e={},e[t]=i),e||i},n.addListener=function(t,i){var n,o=this.getListenersAsObject(t),r="object"==typeof i;for(n in o)o.hasOwnProperty(n)&&e(o[n],i)===-1&&o[n].push(r?i:{listener:i,once:!1});return this},n.on=i("addListener"),n.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},n.once=i("addOnceListener"),n.defineEvent=function(t){return this.getListeners(t),this},n.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},n.removeListener=function(t,i){var n,o,r=this.getListenersAsObject(t);for(o in r)r.hasOwnProperty(o)&&(n=e(r[o],i),n!==-1&&r[o].splice(n,1));return this},n.off=i("removeListener"),n.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},n.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},n.manipulateListeners=function(t,e,i){var n,o,r=t?this.removeListener:this.addListener,s=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(n=i.length;n--;)r.call(this,e,i[n]);else for(n in e)e.hasOwnProperty(n)&&(o=e[n])&&("function"==typeof o?r.call(this,n,o):s.call(this,n,o));return this},n.removeEvent=function(t){var e,i=typeof t,n=this._getEvents();if("string"===i)delete n[t];else if(t instanceof RegExp)for(e in n)n.hasOwnProperty(e)&&t.test(e)&&delete n[e];else delete this._events;return this},n.removeAllListeners=i("removeEvent"),n.emitEvent=function(t,e){var i,n,o,r,s=this.getListenersAsObject(t);for(o in s)if(s.hasOwnProperty(o))for(n=s[o].length;n--;)i=s[o][n],i.once===!0&&this.removeListener(t,i.listener),r=i.listener.apply(this,e||[]),r===this._getOnceReturnValue()&&this.removeListener(t,i.listener);return this},n.trigger=i("emitEvent"),n.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},n.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},n._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},n._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return o.EventEmitter=r,t},"function"==typeof define&&define.amd?define("eventEmitter/EventEmitter",[],function(){return t}):"object"==typeof module&&module.exports?module.exports=t:o.EventEmitter=t}.call(this),function(t){function e(t){if(t){if("string"==typeof n[t])return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e,o=0,r=i.length;o<r;o++)if(e=i[o]+t,"string"==typeof n[e])return e}}var i="Webkit Moz ms Ms O".split(" "),n=document.documentElement.style;"function"==typeof define&&define.amd?define("get-style-property/get-style-property",[],function(){return e}):"object"==typeof exports?module.exports=e:t.getStyleProperty=e}(window),function(t,e){function i(t){var e=parseFloat(t),i=t.indexOf("%")===-1&&!isNaN(e);return i&&e}function n(){}function o(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0,i=a.length;e<i;e++){var n=a[e];t[n]=0}return t}function r(e){function n(){if(!p){p=!0;var n=t.getComputedStyle;if(l=function(){var t=n?function(t){return n(t,null)}:function(t){return t.currentStyle};return function(e){var i=t(e);return i||s("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),i}}(),u=e("boxSizing")){var o=document.createElement("div");o.style.width="200px",o.style.padding="1px 2px 3px 4px",o.style.borderStyle="solid",o.style.borderWidth="1px 2px 3px 4px",o.style[u]="border-box";var r=document.body||document.documentElement;r.appendChild(o);var a=l(o);c=200===i(a.width),r.removeChild(o)}}}function r(t){if(n(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=l(t);if("none"===e.display)return o();var r={};r.width=t.offsetWidth,r.height=t.offsetHeight;for(var s=r.isBorderBox=!(!u||!e[u]||"border-box"!==e[u]),p=0,f=a.length;p<f;p++){var d=a[p],m=e[d];m=h(t,m);var y=parseFloat(m);r[d]=isNaN(y)?0:y}var g=r.paddingLeft+r.paddingRight,v=r.paddingTop+r.paddingBottom,_=r.marginLeft+r.marginRight,b=r.marginTop+r.marginBottom,x=r.borderLeftWidth+r.borderRightWidth,E=r.borderTopWidth+r.borderBottomWidth,j=s&&c,z=i(e.width);z!==!1&&(r.width=z+(j?0:g+x));var T=i(e.height);return T!==!1&&(r.height=T+(j?0:v+E)),r.innerWidth=r.width-(g+x),r.innerHeight=r.height-(v+E),r.outerWidth=r.width+_,r.outerHeight=r.height+b,r}}function h(e,i){if(t.getComputedStyle||i.indexOf("%")===-1)return i;var n=e.style,o=n.left,r=e.runtimeStyle,s=r&&r.left;return s&&(r.left=e.currentStyle.left),n.left=i,i=n.pixelLeft,n.left=o,s&&(r.left=s),i}var l,u,c,p=!1;return r}var s="undefined"==typeof console?n:function(t){console.error(t)},a=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];"function"==typeof define&&define.amd?define("get-size/get-size",["get-style-property/get-style-property"],r):"object"==typeof exports?module.exports=r(require("desandro-get-style-property")):t.getSize=r(t.getStyleProperty)}(window),function(t){function e(t){"function"==typeof t&&(e.isReady?t():s.push(t))}function i(t){var i="readystatechange"===t.type&&"complete"!==r.readyState;e.isReady||i||n()}function n(){e.isReady=!0;for(var t=0,i=s.length;t<i;t++){var n=s[t];n()}}function o(o){return"complete"===r.readyState?n():(o.bind(r,"DOMContentLoaded",i),o.bind(r,"readystatechange",i),o.bind(t,"load",i)),e}var r=t.document,s=[];e.isReady=!1,"function"==typeof define&&define.amd?define("doc-ready/doc-ready",["eventie/eventie"],o):"object"==typeof exports?module.exports=o(require("eventie")):t.docReady=o(t.eventie)}(window),function(t){function e(t,e){return t[s](e)}function i(t){if(!t.parentNode){var e=document.createDocumentFragment();e.appendChild(t)}}function n(t,e){i(t);for(var n=t.parentNode.querySelectorAll(e),o=0,r=n.length;o<r;o++)if(n[o]===t)return!0;return!1}function o(t,n){return i(t),e(t,n)}var r,s=function(){if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0,n=e.length;i<n;i++){var o=e[i],r=o+"MatchesSelector";if(t[r])return r}}();if(s){var a=document.createElement("div"),h=e(a,"div");r=h?e:o}else r=n;"function"==typeof define&&define.amd?define("matches-selector/matches-selector",[],function(){return r}):"object"==typeof exports?module.exports=r:window.matchesSelector=r}(Element.prototype),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["doc-ready/doc-ready","matches-selector/matches-selector"],function(i,n){return e(t,i,n)}):"object"==typeof exports?module.exports=e(t,require("doc-ready"),require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.docReady,t.matchesSelector)}(window,function(t,e,i){var n={};n.extend=function(t,e){for(var i in e)t[i]=e[i];return t},n.modulo=function(t,e){return(t%e+e)%e};var o=Object.prototype.toString;n.isArray=function(t){return"[object Array]"==o.call(t)},n.makeArray=function(t){var e=[];if(n.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var i=0,o=t.length;i<o;i++)e.push(t[i]);else e.push(t);return e},n.indexOf=Array.prototype.indexOf?function(t,e){return t.indexOf(e)}:function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},n.removeFrom=function(t,e){var i=n.indexOf(t,e);i!=-1&&t.splice(i,1)},n.isElement="function"==typeof HTMLElement||"object"==typeof HTMLElement?function(t){return t instanceof HTMLElement}:function(t){return t&&"object"==typeof t&&1==t.nodeType&&"string"==typeof t.nodeName},n.setText=function(){function t(t,i){e=e||(void 0!==document.documentElement.textContent?"textContent":"innerText"),t[e]=i}var e;return t}(),n.getParent=function(t,e){for(;t!=document.body;)if(t=t.parentNode,i(t,e))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,e){t=n.makeArray(t);for(var o=[],r=0,s=t.length;r<s;r++){var a=t[r];if(n.isElement(a))if(e){i(a,e)&&o.push(a);for(var h=a.querySelectorAll(e),l=0,u=h.length;l<u;l++)o.push(h[l])}else o.push(a)}return o},n.debounceMethod=function(t,e,i){var n=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];t&&clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout(function(){n.apply(r,e),delete r[o]},i||100)}},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var r=t.console;return n.htmlInit=function(i,o){e(function(){for(var e=n.toDashed(o),s=document.querySelectorAll(".js-"+e),a="data-"+e+"-options",h=0,l=s.length;h<l;h++){var u,c=s[h],p=c.getAttribute(a);try{u=p&&JSON.parse(p)}catch(t){r&&r.error("Error parsing "+a+" on "+c.nodeName.toLowerCase()+(c.id?"#"+c.id:"")+": "+t);continue}var f=new i(c,u),d=t.jQuery;d&&d.data(c,o,f)}})},n}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/item",["eventEmitter/EventEmitter","get-size/get-size","get-style-property/get-style-property","fizzy-ui-utils/utils"],function(i,n,o,r){return e(t,i,n,o,r)}):"object"==typeof exports?module.exports=e(t,require("wolfy87-eventemitter"),require("get-size"),require("desandro-get-style-property"),require("fizzy-ui-utils")):(t.Outlayer={},t.Outlayer.Item=e(t,t.EventEmitter,t.getSize,t.getStyleProperty,t.fizzyUIUtils))}(window,function(t,e,i,n,o){function r(t){for(var e in t)return!1;return e=null,!0}function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function a(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var h=t.getComputedStyle,l=h?function(t){return h(t,null)}:function(t){return t.currentStyle},u=n("transition"),c=n("transform"),p=u&&c,f=!!n("perspective"),d={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend",transition:"transitionend"}[u],m=["transform","transition","transitionDuration","transitionProperty"],y=function(){for(var t={},e=0,i=m.length;e<i;e++){var o=m[e],r=n(o);r&&r!==o&&(t[o]=r)}return t}();o.extend(s.prototype,e.prototype),s.prototype._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.getSize=function(){this.size=i(this.element)},s.prototype.css=function(t){var e=this.element.style;for(var i in t){var n=y[i]||i;e[n]=t[i]}},s.prototype.getPosition=function(){var t=l(this.element),e=this.layout.options,i=e.isOriginLeft,n=e.isOriginTop,o=t[i?"left":"right"],r=t[n?"top":"bottom"],s=this.layout.size,a=o.indexOf("%")!=-1?parseFloat(o)/100*s.width:parseInt(o,10),h=r.indexOf("%")!=-1?parseFloat(r)/100*s.height:parseInt(r,10);a=isNaN(a)?0:a,h=isNaN(h)?0:h,a-=i?s.paddingLeft:s.paddingRight,h-=n?s.paddingTop:s.paddingBottom,this.position.x=a,this.position.y=h},s.prototype.layoutPosition=function(){var t=this.layout.size,e=this.layout.options,i={},n=e.isOriginLeft?"paddingLeft":"paddingRight",o=e.isOriginLeft?"left":"right",r=e.isOriginLeft?"right":"left",s=this.position.x+t[n];i[o]=this.getXValue(s),i[r]="";var a=e.isOriginTop?"paddingTop":"paddingBottom",h=e.isOriginTop?"top":"bottom",l=e.isOriginTop?"bottom":"top",u=this.position.y+t[a];i[h]=this.getYValue(u),
i[l]="",this.css(i),this.emitEvent("layout",[this])},s.prototype.getXValue=function(t){var e=this.layout.options;return e.percentPosition&&!e.isHorizontal?t/this.layout.size.width*100+"%":t+"px"},s.prototype.getYValue=function(t){var e=this.layout.options;return e.percentPosition&&e.isHorizontal?t/this.layout.size.height*100+"%":t+"px"},s.prototype._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,o=parseInt(t,10),r=parseInt(e,10),s=o===this.position.x&&r===this.position.y;if(this.setPosition(t,e),s&&!this.isTransitioning)return void this.layoutPosition();var a=t-i,h=e-n,l={};l.transform=this.getTranslate(a,h),this.transition({to:l,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},s.prototype.getTranslate=function(t,e){var i=this.layout.options;return t=i.isOriginLeft?t:-t,e=i.isOriginTop?e:-e,f?"translate3d("+t+"px, "+e+"px, 0)":"translate("+t+"px, "+e+"px)"},s.prototype.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},s.prototype.moveTo=p?s.prototype._transitionTo:s.prototype.goTo,s.prototype.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},s.prototype._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},s.prototype._transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);var n=this.element.offsetHeight;n=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var g="opacity,"+a(y.transform||"transform");s.prototype.enableTransition=function(){this.isTransitioning||(this.css({transitionProperty:g,transitionDuration:this.layout.options.transitionDuration}),this.element.addEventListener(d,this,!1))},s.prototype.transition=s.prototype[u?"_transition":"_nonTransition"],s.prototype.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},s.prototype.onotransitionend=function(t){this.ontransitionend(t)};var v={"-webkit-transform":"transform","-moz-transform":"transform","-o-transform":"transform"};s.prototype.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=v[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],r(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd){var n=e.onEnd[i];n.call(this),delete e.onEnd[i]}this.emitEvent("transitionEnd",[this])}},s.prototype.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(d,this,!1),this.isTransitioning=!1},s.prototype._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var _={transitionProperty:"",transitionDuration:""};return s.prototype.removeTransitionStyles=function(){this.css(_)},s.prototype.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},s.prototype.remove=function(){if(!u||!parseFloat(this.layout.options.transitionDuration))return void this.removeElem();var t=this;this.once("transitionEnd",function(){t.removeElem()}),this.hide()},s.prototype.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},i=this.getHideRevealTransitionEndProperty("visibleStyle");e[i]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},s.prototype.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},s.prototype.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},i=this.getHideRevealTransitionEndProperty("hiddenStyle");e[i]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},s.prototype.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},s.prototype.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/outlayer",["eventie/eventie","eventEmitter/EventEmitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(i,n,o,r,s){return e(t,i,n,o,r,s)}):"object"==typeof exports?module.exports=e(t,require("eventie"),require("wolfy87-eventemitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.eventie,t.EventEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,i,n,o,r){function s(t,e){var i=o.getQueryElement(t);if(!i)return void(a&&a.error("Bad element for "+this.constructor.namespace+": "+(i||t)));this.element=i,h&&(this.$element=h(this.element)),this.options=o.extend({},this.constructor.defaults),this.option(e);var n=++u;this.element.outlayerGUID=n,c[n]=this,this._create(),this.options.isInitLayout&&this.layout()}var a=t.console,h=t.jQuery,l=function(){},u=0,c={};return s.namespace="outlayer",s.Item=r,s.defaults={containerStyle:{position:"relative"},isInitLayout:!0,isOriginLeft:!0,isOriginTop:!0,isResizeBound:!0,isResizingContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}},o.extend(s.prototype,i.prototype),s.prototype.option=function(t){o.extend(this.options,t)},s.prototype._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),o.extend(this.element.style,this.options.containerStyle),this.options.isResizeBound&&this.bindResize()},s.prototype.reloadItems=function(){this.items=this._itemize(this.element.children)},s.prototype._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],o=0,r=e.length;o<r;o++){var s=e[o],a=new i(s,this);n.push(a)}return n},s.prototype._filterFindItemElements=function(t){return o.filterFindElements(t,this.options.itemSelector)},s.prototype.getItemElements=function(){for(var t=[],e=0,i=this.items.length;e<i;e++)t.push(this.items[e].element);return t},s.prototype.layout=function(){this._resetLayout(),this._manageStamps();var t=void 0!==this.options.isLayoutInstant?this.options.isLayoutInstant:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},s.prototype._init=s.prototype.layout,s.prototype._resetLayout=function(){this.getSize()},s.prototype.getSize=function(){this.size=n(this.element)},s.prototype._getMeasurement=function(t,e){var i,r=this.options[t];r?("string"==typeof r?i=this.element.querySelector(r):o.isElement(r)&&(i=r),this[t]=i?n(i)[e]:r):this[t]=0},s.prototype.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},s.prototype._getItemsForLayout=function(t){for(var e=[],i=0,n=t.length;i<n;i++){var o=t[i];o.isIgnored||e.push(o)}return e},s.prototype._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){for(var i=[],n=0,o=t.length;n<o;n++){var r=t[n],s=this._getItemLayoutPosition(r);s.item=r,s.isInstant=e||r.isLayoutInstant,i.push(s)}this._processLayoutQueue(i)}},s.prototype._getItemLayoutPosition=function(){return{x:0,y:0}},s.prototype._processLayoutQueue=function(t){for(var e=0,i=t.length;e<i;e++){var n=t[e];this._positionItem(n.item,n.x,n.y,n.isInstant)}},s.prototype._positionItem=function(t,e,i,n){n?t.goTo(e,i):t.moveTo(e,i)},s.prototype._postLayout=function(){this.resizeContainer()},s.prototype.resizeContainer=function(){if(this.options.isResizingContainer){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},s.prototype._getContainerSize=l,s.prototype._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},s.prototype._emitCompleteOnItems=function(t,e){function i(){o.dispatchEvent(t+"Complete",null,[e])}function n(){s++,s===r&&i()}var o=this,r=e.length;if(!e||!r)return void i();for(var s=0,a=0,h=e.length;a<h;a++){var l=e[a];l.once(t,n)}},s.prototype.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),h)if(this.$element=this.$element||h(this.element),e){var o=h.Event(e);o.type=t,this.$element.trigger(o,i)}else this.$element.trigger(t,i)},s.prototype.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},s.prototype.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},s.prototype.stamp=function(t){if(t=this._find(t)){this.stamps=this.stamps.concat(t);for(var e=0,i=t.length;e<i;e++){var n=t[e];this.ignore(n)}}},s.prototype.unstamp=function(t){if(t=this._find(t))for(var e=0,i=t.length;e<i;e++){var n=t[e];o.removeFrom(this.stamps,n),this.unignore(n)}},s.prototype._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=o.makeArray(t)},s.prototype._manageStamps=function(){if(this.stamps&&this.stamps.length){this._getBoundingRect();for(var t=0,e=this.stamps.length;t<e;t++){var i=this.stamps[t];this._manageStamp(i)}}},s.prototype._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},s.prototype._manageStamp=l,s.prototype._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,o=n(t),r={left:e.left-i.left-o.marginLeft,top:e.top-i.top-o.marginTop,right:i.right-e.right-o.marginRight,bottom:i.bottom-e.bottom-o.marginBottom};return r},s.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.prototype.bindResize=function(){this.isResizeBound||(e.bind(t,"resize",this),this.isResizeBound=!0)},s.prototype.unbindResize=function(){this.isResizeBound&&e.unbind(t,"resize",this),this.isResizeBound=!1},s.prototype.onresize=function(){function t(){e.resize(),delete e.resizeTimeout}this.resizeTimeout&&clearTimeout(this.resizeTimeout);var e=this;this.resizeTimeout=setTimeout(t,100)},s.prototype.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},s.prototype.needsResizeLayout=function(){var t=n(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},s.prototype.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},s.prototype.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},s.prototype.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},s.prototype.reveal=function(t){this._emitCompleteOnItems("reveal",t);for(var e=t&&t.length,i=0;e&&i<e;i++){var n=t[i];n.reveal()}},s.prototype.hide=function(t){this._emitCompleteOnItems("hide",t);for(var e=t&&t.length,i=0;e&&i<e;i++){var n=t[i];n.hide()}},s.prototype.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},s.prototype.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},s.prototype.getItem=function(t){for(var e=0,i=this.items.length;e<i;e++){var n=this.items[e];if(n.element===t)return n}},s.prototype.getItems=function(t){t=o.makeArray(t);for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i],s=this.getItem(r);s&&e.push(s)}return e},s.prototype.remove=function(t){var e=this.getItems(t);if(this._emitCompleteOnItems("remove",e),e&&e.length)for(var i=0,n=e.length;i<n;i++){var r=e[i];r.remove(),o.removeFrom(this.items,r)}},s.prototype.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="";for(var e=0,i=this.items.length;e<i;e++){var n=this.items[e];n.destroy()}this.unbindResize();var o=this.element.outlayerGUID;delete c[o],delete this.element.outlayerGUID,h&&h.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=o.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&c[e]},s.create=function(t,e){function i(){s.apply(this,arguments)}return Object.create?i.prototype=Object.create(s.prototype):o.extend(i.prototype,s.prototype),i.prototype.constructor=i,i.defaults=o.extend({},s.defaults),o.extend(i.defaults,e),i.prototype.settings={},i.namespace=t,i.data=s.data,i.Item=function(){r.apply(this,arguments)},i.Item.prototype=new r,o.htmlInit(i,t),h&&h.bridget&&h.bridget(t,i),i},s.Item=r,s}),function(t,e){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","fizzy-ui-utils/utils"],e):"object"==typeof exports?module.exports=e(require("outlayer"),require("get-size"),require("fizzy-ui-utils")):t.Masonry=e(t.Outlayer,t.getSize,t.fizzyUIUtils)}(window,function(t,e,i){var n=t.create("masonry");return n.prototype._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns();var t=this.cols;for(this.colYs=[];t--;)this.colYs.push(0);this.maxY=0},n.prototype.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/n,s=n-o%n,a=s&&s<1?"round":"floor";r=Math[a](r),this.cols=Math.max(r,1)},n.prototype.getContainerWidth=function(){var t=this.options.isFitWidth?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n.prototype._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,n=e&&e<1?"round":"ceil",o=Math[n](t.size.outerWidth/this.columnWidth);o=Math.min(o,this.cols);for(var r=this._getColGroup(o),s=Math.min.apply(Math,r),a=i.indexOf(r,s),h={x:this.columnWidth*a,y:s},l=s+t.size.outerHeight,u=this.cols+1-r.length,c=0;c<u;c++)this.colYs[a+c]=l;return h},n.prototype._getColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++){var o=this.colYs.slice(n,n+t);e[n]=Math.max.apply(Math,o)}return e},n.prototype._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),o=this.options.isOriginLeft?n.left:n.right,r=o+i.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var h=(this.options.isOriginTop?n.top:n.bottom)+i.outerHeight,l=s;l<=a;l++)this.colYs[l]=Math.max(h,this.colYs[l])},n.prototype._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this.options.isFitWidth&&(t.width=this._getContainerFitWidth()),t},n.prototype._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.prototype.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!==this.containerWidth},n}),$(function(){function t(){$(".modal").css("display","block")}function e(t){t.preventDefault(),$(".modal").css("display","none")}function i(){return Math.floor(10*Math.random())+1}function n(t){for(var e=$(".grid-item"),i=0;i<t.length;i++){var n=$("#grid-tmpl").html(),o=tmplJR(n,{data:t[i]});$(e[i]).html(o)}}function o(e){$.ajax({url:"https://pixabay.com/api/?key="+s+"&q="+e+"&image_type=photo&page="+i()+"&per_page=7",dataType:"jsonp",success:function(e){if(0!=e.hits.length){if(h){var i=$("#ideas-tmpl").html(),o=tmplJR(i,{data:e.hits});$(".ideas__grid").html(o),h=!1}else n(e.hits);a=!0}else a=!1,t()},error:function(){a=!1,alert("Error!")}})}$(".jcarousel").jcarousel({wrap:"circular",animation:600}),$(".jcarousel-control-prev").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).on("click",function(t){t.preventDefault()}).jcarouselControl({target:"-=1"}),$(".jcarousel-control-next").on("jcarouselcontrol:active",function(){$(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){$(this).addClass("inactive")}).on("click",function(t){t.preventDefault()}).jcarouselControl({target:"+=1"});var r="",s="3355133-ffdd9eccecc4a026fdd03c452",a=!1,h=!0,l=$(".search__input-block__text"),u=$(".search__input-block__btn"),c=function(t){t.preventDefault(),r=$.trim(l.val()),0!==r.length&&(o(r),a&&$(".ideas-grid").masonry("reloadItems"))};$(window).load(function(){$(".ideas__grid").masonry({itemSelector:".grid-item",columnWidth:".grid-sizer",percentPosition:!0})}),o(r),u.on("click",c),$(".modal").on("click",e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
